<?php

namespace App\Http\Controllers;

use App\Models\Answer;
use App\Models\Game;
use App\Models\Question;
use App\Models\Topic;
use Dflydev\DotAccessData\Data;
use Illuminate\Support\Facades\DB;
use SomeNamespace\Exceptions\ConnectionException;
use Illuminate\Http\Request;
use OpenAI;


class QuizController extends Controller
{
    public function showForm()
    {
        return view('users.create_quiz');
    }

    public function showGame($id)
    {
        // get game by id.
        $game = Game::findOrFail($id);
        if(!$game) return;
        return view('games.detail', compact('game'));
    }

    public function generateQuiz(Request $request)
    {
        $request->validate([
            'topic' => 'required',
            'game' => 'required',
            'number' => 'required|string',
        ]);

        $topicName = $request->input('topic');
        $gameName = $request->input('game');
        $number = $request->input('number');

        try {
            $client = OpenAI::client(env('OPENAI_API_KEY'));

            $prompt = "Tạo một game với tên là $gameName với chủ đề là $topicName và có $number câu hỏi.
             Dữ liệu trả về nên ở định dạng JSON. Mỗi câu hỏi nên có 4 lựa chọn đáp án, và chỉ có một đáp án đúng.
              Danh sách câu hỏi nên nằm trong trường ‘quiz’, các lựa chọn đáp án trong trường ‘answers’,
               và đáp án đúng trong trường ‘correct_answer’. Chỉ tạo bằng tiếng Việt.";

            $response = $client->chat()->create([
                'model' => 'gpt-3.5-turbo',
                'messages' => [
                    ['role' => 'user', 'content' => $prompt],
                ],
            ]);

            $quizData = $response['choices'][0]['message']['content'];
            $decoded = json_decode($quizData, true);
            // Check if topic exists, if not create it
            $topic = Topic::firstOrCreate(['name' => $topicName]);

            // Check if game exists, if not create it
            $game = Game::firstOrCreate([
                'name' => $gameName,
                'topic_id' => $topic->id,
                'description' => 'Quiz generated by OpenAI',
                'cover_img' => null,
                'qr_code' => null,
                'created_by' => null,
                'deleted_by' => null,
                'start_time' => now(),
                'end_time' => now()->addDays(1),
            ]);

            foreach ($decoded['quiz'] as $quizItem) {
                // Insert question into the question table
                $question = new Question();
                $question->game_id = $game->id; // Set the game ID
                $question->content = $quizItem['question'];
                $question->countdown_time = 30; // Example: setting a default countdown time
                $question->correct_answer = $quizItem['correct_answer'];
                $question->score = 10; // Example: setting a default score
                $question->save();

                // Insert answers into the answer table
                foreach ($quizItem['answers'] as $key => $answerContent) {
                    $answer = new Answer();
                    $answer->question_id = $question->id;
                    $answer->answer_content = $answerContent;
                    $answer->correct_answer = $quizItem['correct_answer'] === $key ? true : false;
                    $answer->save();
                }
            }
            return redirect('/quiz/' . $game->id);
//            return view('questions.question-list', compact('topic', 'game', 'decoded'));
        } catch (Exception $e) {
            return back()->with('error', 'An error occurred while generating the quiz: ' . $e->getMessage());
        }
    }

//    public function generateQuiz(Request $request)
//    {
//        $request->validate([
//            'topic' => 'required',
//            'game'=>'required',
//            'number' => 'required|string',
//        ]);
//        $topic = $request->input('topic');
//        $game = $request->input('game');
//        $number = $request->input('number');
//
//        try {
//            $client = OpenAI::client(env('OPENAI_API_KEY'));
//
//            $prompt = " Tạo cho tôi một game quiz có tên là $game với chủ đề là
//             $topic với số lượng câu hỏi là $number.
//            Dữ liệu trả về cho tôi ở định dạng json.
//             Mỗi câu hỏi có 4 lựa chọn đáp án và chỉ có một đáp án đúng
//            .Danh sách câu hỏi nằm trong trường quiz,
//             danh sách câu trả lời nằm trong trường answers của quiz,
//              câu trả lời đúng nằm trong trường correct_answer của quiz";
//
//            $response = $client->chat()->create([
//                'model' => 'gpt-3.5-turbo',
//                'messages' => [
//                    ['role' => 'user', 'content' => $prompt],
//                ],
//            ]);
//
//            $quizData = $response['choices'][0]['message']['content'];
//            // save list question
//            // save list answer;
//            $decoded = json_decode($quizData);
//            // redirect detail with game id.
//            return view('questions.question-list', compact('topic','game', 'decoded'));
//        } catch (Exception $e) {
//            return back()->with('error', 'Có lỗi xảy ra khi tạo quiz: ' . $e->getMessage());
//        }
//    }

}
