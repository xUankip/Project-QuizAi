<?php

namespace App\Http\Controllers;

use App\Models\Answer;
use App\Models\Game;
use App\Models\Question;
use App\Models\Topic;
use App\Models\UserAnswer;
use App\Models\Users;
use Dflydev\DotAccessData\Data;
use Illuminate\Support\Facades\DB;
use SomeNamespace\Exceptions\ConnectionException;
use Illuminate\Http\Request;
use OpenAI;
use Illuminate\Support\Facades\Session;

class QuizController extends Controller
{
    public function showForm()
    {
        $usersID = Session::get('user_id');
        $users = Users::findOrFail($usersID);
        return view('games.generate',compact('users'));
    }

    public function generateQuiz(Request $request)
    {
        $userId = Session::get('user_id');
        $request->validate([
            'topic' => 'required',
            'game' => 'required',
            'number' => 'required|integer|min:5|max:20',
        ]);

        $topicName = $request->input('topic');
        $gameName = $request->input('game');
        $number = $request->input('nfumber');

        try {
            $client = OpenAI::client(env('OPENAI_API_KEY'));

            $prompt = "Tạo một game với tên là $gameName với chủ đề là $topicName và có $number câu hỏi.
             Dữ liệu trả về nên ở định dạng JSON. Mỗi câu hỏi nên có 4 lựa chọn đáp án, và chỉ có một đáp án đúng.
              Danh sách câu hỏi nên nằm trong trường ‘quiz’, các lựa chọn đáp án trong trường ‘answers’,
               và đáp án đúng trong trường ‘correct_answer’. Chỉ tạo bằng tiếng Việt.";

            $response = $client->chat()->create([
                'model' => 'gpt-3.5-turbo',
                'messages' => [
                    ['role' => 'user', 'content' => $prompt],
                ],
            ]);
            $quizData = $response['choices'][0]['message']['content'];
            $decoded = json_decode($quizData, true);
            // Check if topic exists, if not create it
//            $topic = Topic::firstOrCreate([
//                'name' => $topicName,
//                'description' => 'Quiz generated by OpenAI',
//                'thumbnail_url'=>null,
//                'created_by'=>$userId,
//                'updated_by'=>$userId,
//            ]);
            $topic = new Topic();
            $topic->name = $topicName;
            $topic->description = 'Quiz generated by OpenAI';
            $topic->thumbnail_url = null;
            $topic->created_by = $userId;
            $topic->updated_by = $userId;
            $topic->save();

            // Check if game exists, if not create it
            $game = Game::firstOrCreate([
                'name' => $gameName,
                'topic_id' => $topic->id,
                'description' => 'Quiz generated by OpenAI',
                'cover_img' => null,
                'qr_code' => null,
                'created_by'=>$userId,
                'updated_by'=>$userId,
                'start_time' => now(),
                'end_time' => now()->addDays(1),
            ]);

            foreach ($decoded['quiz'] as $quizItem) {
                // Insert question into the question table
                $question = new Question();
                $question->game_id = $game->id;// Set the game ID
                $question->content = $quizItem['question'];
                $question->countdown_time = 30; // Example: setting a default countdown time
                $question->correct_answer = $quizItem['correct_answer'];
//                $question->score = 10; // Example: setting a default score
                $question->created_by = $userId;
                $question->updated_by = $userId;
                $question->save();

                // Insert answers into the answer table
                foreach ($quizItem['answers'] as $answerContent) {
                    $answer = new Answer();
                    $answer->question_id = $question->id;
                    $answer->answer_content = $answerContent;
//                    $answer->correct_answer = $quizItem['correct_answer'];
                    $answer->created_by = $userId;
                    $answer->updated_by = $userId;
                    $answer->save();
                }
            }
            return redirect('/quiz/' . $game->id);
//            return view('questions.question-list', compact('topic', 'game', 'decoded'));
        } catch (Exception $e) {
            return back()->with('error', 'An error occurred while generating the quiz: ' . $e->getMessage());
        }
    }

    public function showGame($id)
    {
        // get game by id.
        $game = Game::findOrFail($id);
        $usersID = Session::get('user_id');
        $users = Users::findOrFail($usersID);
        if (!$game) return;
        return view('games.detail', compact('game','users'));
    }

    public function viewPlayUsers()
    {
        // get game by id.
        $id = Session::get('gameID');
//        $id = 8;
        $game = Game::findOrFail($id);
//            Session::put('gameID', $game->id);
        // Khởi tạo chỉ số câu hỏi hiện tại trong session, bắt đầu từ 0.
        Session::put('currentQuestionIndex', 0);
        // Trả về view 'games.ingame' và truyền đối tượng game và câu hỏi đầu tiên của trò chơi.
        return view('games.ingame', [
            'game' => $game,
            'currentQuestion' => $game->questions()->first()
        ]);
//            return view('games.ingame', compact('game'));
    }

    public function checkAnswer(Request $request)
    {
        $gameId = Session::get('gameID');
        $answer = $request->input('answer_content');
        $game = Game::findOrFail($gameId);
        $questionId = $request->input('question_id'); // Lấy ID câu hỏi từ request
        $userId = Session::get('user_id');
        $totalQuestions = $game->questions->count();

        $existingAnswer = UserAnswer::where('user_id', $userId)
            ->where('game_id', $gameId)
            ->where('question_id', $questionId)
            ->first();

        if ($existingAnswer) {
            // Người dùng đã trả lời câu hỏi này, không lưu lại nữa
            $game = Game::findOrFail($gameId);
//            $totalQuestions = $game->questions->count();
            $game_id = Session::get('gameID');
            // Truy vấn đến bảng users
            $topUsers = DB::table('user')
                // Chọn cột của user và cột total_score trong bảng user_answers
                ->select('user.id', 'user.name', DB::raw('SUM(user_answer.score) as total_score'))
                ->where('user_answer.game_id',$game_id)

                // Kết hợp bảng users với bảng user_answer để lấy điểm số của từng người chơi
                ->join('user_answer', 'user.id', '=', 'user_answer.user_id')
                // Nhóm kết quả theo các cột cụ thể
                ->groupBy('user.id', 'user.name')
                ->orderBy('total_score', 'desc') // Sắp xếp theo điểm từ cao đến thấp
                ->limit(5) // Giới hạn kết quả là 5 người chơi
                ->get()
                ->map(function ($user) {
                    // Định dạng số thập phân với 2 chữ số sau dấu phẩy
                    $user->total_score = number_format($user->total_score, 2);
                    return $user;
                });
                return view('games.score', [
                    'game' => $game,
                    'correctAnswers' => UserAnswer::where('game_id', $gameId)->where('user_id', $userId)->where('score','!=', 0)->count(),
                    'totalQuestions' => $totalQuestions,
                    'topUsers' => $topUsers,
                ]);
        }

        $question = Question::findOrFail($questionId);

        $user_answer = new UserAnswer();
        $user_answer->user_id = $userId;
        $user_answer->game_id = $gameId;
        $user_answer->question_id = $questionId;
        $user_answer->selected_answer = $answer;
        $user_answer->score = 0;
        $scoreQuestion = 100/$totalQuestions;
        $timeLeft = $request->input('time_left');

        if ($answer == $question->correct_answer) {
            $user_answer->score = round($scoreQuestion * ($timeLeft / 30), 2);
            $user_answer->time_taken = $timeLeft;
        }
        $user_answer->save();

        // Đếm số câu trả lời đúng của người dùng
//        $correctAnswersCount = UserAnswer::where('game_id', $gameId)
//            ->where('user_id', $userId)
//            ->where('score', '!=', 0)
//            ->count();

        $currentQuestionIndex = Session::get('currentQuestionIndex');
        // Kiểm tra nếu vẫn còn câu hỏi tiếp theo
        if ($currentQuestionIndex < $totalQuestions - 1) {
            // Tăng chỉ số câu hỏi hiện tại
            Session::put('currentQuestionIndex', $currentQuestionIndex + 1);
            $nextQuestion = $game->questions()->skip($currentQuestionIndex + 1)->first();

            // Trả về view 'games.ingame' với câu hỏi tiếp theo
            return view('games.ingame', [
                'game' => $game,
                'currentQuestion' => $nextQuestion,
                'correctAnswers' => UserAnswer::where('game_id', $gameId)->where('user_id', $userId)->where('score', '!=', 0)->count(),
                'totalQuestions' => $totalQuestions,
            ]);
        } else {
            $game_id = Session::get('gameID');
            // Truy vấn đến bảng users
            $topUsers = DB::table('user')
                // Chọn cột của user và cột total_score trong bảng user_answers
                ->select('user.id', 'user.name', DB::raw('SUM(user_answer.score) as total_score'))
                ->where('user_answer.game_id',$game_id)

                // Kết hợp bảng users với bảng user_answer để lấy điểm số của từng người chơi
                ->join('user_answer', 'user.id', '=', 'user_answer.user_id')
                // Nhóm kết quả theo các cột cụ thể
                ->groupBy('user.id', 'user.name')
                ->orderBy('total_score', 'desc') // Sắp xếp theo điểm từ cao đến thấp
                ->limit(5) // Giới hạn kết quả là 3 người chơi
                ->get()
                ->map(function ($user) {
                    // Định dạng số thập phân với 2 chữ số sau dấu phẩy
                    $user->total_score = number_format($user->total_score, 2);
                    return $user;
                });
            // Hiển thị kết quả cuối cùng
            return view('games.score', [
                'game' => $game,
                'correctAnswers' => UserAnswer::where('game_id', $gameId)->where('user_id', $userId)->where('score','!=', 0)->count(),
                'totalQuestions' => $totalQuestions,
                'topUsers' => $topUsers,
            ]);
        }
    }
}
