<?php

namespace App\Http\Controllers;

use App\Models\Answer;
use App\Models\Game;
use App\Models\Question;
use App\Models\Topic;
use App\Models\UserAnswer;
use App\Models\Users;
use Dflydev\DotAccessData\Data;
use Illuminate\Support\Facades\DB;
use SomeNamespace\Exceptions\ConnectionException;
use Illuminate\Http\Request;
use OpenAI;
use Illuminate\Support\Facades\Session;

class QuizController extends Controller
{
    public function showForm()
    {
        $usersID = Session::get('user_id');
        $users = Users::findOrFail($usersID);
        return view('games.generate',compact('users'));
    }

    public function generateQuiz(Request $request)
    {
        $userId = Session::get('user_id');
        $request->validate([
            'topic' => 'required',
            'game' => 'required',
            'number' => 'required|integer|min:5|max:20',
        ]);

        $topicName = $request->input('topic');
        $gameName = $request->input('game');
        $number = $request->input('number');

        try {
            $client = OpenAI::client(env('OPENAI_API_KEY'));

            $prompt = "Tạo một game với tên là $gameName với chủ đề là $topicName và có $number câu hỏi.
             Dữ liệu trả về nên ở định dạng JSON. Mỗi câu hỏi nên có 4 lựa chọn đáp án, mỗi đáp án chỉ được lặp lại duy nhất 1 lần
              , và chỉ có một đáp án đúng .
              Danh sách câu hỏi nên nằm trong trường ‘quiz’, các lựa chọn đáp án trong trường ‘answers’,
               và đáp án đúng trong trường ‘correct_answer’. Chỉ tạo bằng tiếng Việt.";

            $response = $client->chat()->create([
                'model' => 'gpt-3.5-turbo',
                'messages' => [
                    ['role' => 'user', 'content' => $prompt],
                ],
            ]);
            $quizData = $response['choices'][0]['message']['content'];
            $decoded = json_decode($quizData, true);
            // Check if topic exists, if not create it
//            $topic = Topic::firstOrCreate([
//                'name' => $topicName,
//                'description' => 'Quiz generated by OpenAI',
//                'thumbnail_url'=>null,
//                'created_by'=>$userId,
//                'updated_by'=>$userId,
//            ]);
            $topic = new Topic();
            $topic->name = $topicName;
            $topic->description = 'Quiz generated by OpenAI';
            $topic->thumbnail_url = null;
            $topic->created_by = $userId;
            $topic->updated_by = $userId;
            $topic->save();

            // Check if game exists, if not create it
            $game = Game::firstOrCreate([
                'name' => $gameName,
                'topic_id' => $topic->id,
                'description' => 'Quiz generated by OpenAI',
                'cover_img' => null,
                'qr_code' => null,
                'created_by'=>$userId,
                'updated_by'=>$userId,
                'start_time' => now(),
                'end_time' => now()->addDays(1),
            ]);

            foreach ($decoded['quiz'] as $quizItem) {
                // Insert question into the question table
                $question = new Question();
                $question->game_id = $game->id;// Set the game ID
                $question->content = $quizItem['question'];
                $question->countdown_time = 30; // Example: setting a default countdown time
                $question->correct_answer = $quizItem['correct_answer'];
//                $question->score = 10; // Example: setting a default score
                $question->created_by = $userId;
                $question->updated_by = $userId;
                $question->save();

                // Insert answers into the answer table
                foreach ($quizItem['answers'] as $answerContent) {
                    $answer = new Answer();
                    $answer->question_id = $question->id;
                    $answer->answer_content = $answerContent;
//                    $answer->correct_answer = $quizItem['correct_answer'];
                    $answer->created_by = $userId;
                    $answer->updated_by = $userId;
                    $answer->save();
                }
            }
            return redirect('/user/quiz/topic/game/' . $game->id);
//            return view('questions.question-list', compact('topic', 'game', 'decoded'));
        } catch (Exception $e) {
            return back()->with('error', 'An error occurred while generating the quiz: ' . $e->getMessage());
        }
    }

    public function playGame($id)
    {
//        dd($id);
        // get game by id.
        $game = Game::findOrFail($id);
        $usersID = Session::get('user_id');
        $users = Users::findOrFail($usersID);
        if (!$game) return;
        return view('games.detail', compact('game','users'));
    }

    public function createOrPlayGame(Request $request)
    {
        $type = $request->input('type');
//        dd($type);
        if ($type == "continue") {
            $gameId = $request->input('gameId');
            return redirect()->route('start', ['id' => $gameId]);
        } else if ($type == "create") {
            return redirect()->route('showForm');
        }
    }


}
